import com.intellij.database.model.DasColumn
import com.intellij.database.model.DasTable
import com.intellij.database.model.ObjectKind
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

import java.sql.Date

/*
* Available context bindings:
* SELECTION Iterable<DasObject>
* PROJECT project
* FILES files helper
*/

dir = "E:\\4-work\\IdeaProjects\\ysxtqx\\src"
packageName = "com.wondersgroup.shys.local.pub.common.model.bo"

typeMapping = [
        (~/(?i)tinyint|smallint|mediumint/)      : "Integer",
        (~/(?i)int/)                             : "Long",
        (~/(?i)bool|bit/)                        : "Boolean",
        (~/(?i)float|double|decimal|real/)       : "Double",
        (~/(?i)datetime|timestamp|date|time/)    : "Date",
        (~/(?i)blob|binary|bfile|clob|raw|image/): "byte[]",
        (~/(?i)number/)                          : "BigDecimal",
        (~/(?i)/)                                : "String"
]

SELECTION.filter { it instanceof DasTable && it.getKind() == ObjectKind.TABLE }.each { generate(it) }


def generate(table) {
    def className = javaName(table.getName(), true)
    def fields = calcFields(table)
    new File(dir, className + ".java").withPrintWriter("utf-8") { out -> generate(out, className, fields, table) }
}

def generate(out, className, fields, table) {
    out.println "package ${packageName}"
    out.println ""
    out.println "import javax.persistence.Column;"
    out.println "import javax.persistence.Entity;"
    out.println "import javax.persistence.Id;"
    out.println "import javax.persistence.Table;"
    Set types = new HashSet()
    fields.each() {
        types.add(it.type)
    }
    if (types.contains("Date")) {
        out.println "import javax.persistence.Temporal;"
        out.println "import javax.persistence.TemporalType;"
    }
    out.println "import java.io.Serializable;"
    if (types.contains("BigDecimal")) {
        out.println "import java.math.BigDecimal;"
    }
    if (types.contains("Date")) {
        out.println "import java.util.Date;"
    }
    out.println ""
    out.println "/**"
    out.println " * generated by Generate POJOs.groovy "
    out.println " * <p>Date: ${new java.util.Date().toString()}.</p>"
    out.println " *"
    out.println " * @author chenjiebin"
    out.println " */"

    out.println "@Entity"
    out.println "@Table(name = \"${table.name}\")"
    out.println "public class ${className} implements Serializable {\n"
    out.println genSerialID()
    out.println ""
    fields.each() {
        if (isNotEmpty(it.comment)) {
            out.println "\t/** ${it.comment} */"
        }
        out.println "\tprivate ${it.type} ${it.name};"
    }

    out.println "\n\tpublic ${className}() {}\n"
    fields.each() {
        if (it.annos != "") out.println " ${it.annos}"

        out.println "\tpublic ${it.type} get${it.name.capitalize()}() {"
        out.println "\t\treturn this.${it.name};"
        out.println "\t}\n"

        out.println "\tpublic void set${it.name.capitalize()}(${it.type} ${it.name}) {"
        out.println "\t\tthis.${it.name} = ${it.name};"
        out.println "\t}\n"
    }
    out.println "}"
}

def calcFields(table) {
    DasUtil.getColumns(table).reduce([]) { fields, col ->
        def spec = Case.LOWER.apply(col.getDataType().getSpecification())
        def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
        def comm = [
                colName: col.getName(),
                name   : changeStyle(javaName(col.getName(), false), true),
                type   : typeStr,
                comment: col.getComment(),
                annos  : "\t@Column(name = \"${col.getName()}\""]
        if (DasColumn.Attribute.PRIMARY_KEY == table.getColumnAttrs(col)[0]) {
            comm.annos = "\t@Id\n${comm.annos}, unique = true"
        }
        if ("date" == spec) {
            comm.annos = "\t@Temporal(TemporalType.TIMESTAMP)\n" + comm.annos
        }
        if (col.isNotNull()) {
            comm.annos += ", nullable = false"
        }
        if (spec.startsWith("varchar2")) {
            comm.annos += ", length = ${col.getDataType().getLength()}"
        }
        if (spec.startsWith("number")) {
            comm.annos += ", precision = ${col.getDataType().getPrecision()}, scale = ${col.getDataType().getScale()}"
        }
        comm.annos += ")"

        fields += [comm]
    }
}


def javaName(str, capitalize) {
    def s = str.split("_").collect { Case.LOWER.apply(it).capitalize() }.join("")
    capitalize || s.length() == 1 ? s : Case.LOWER.apply(s[0]) + s[1..-1]
}

def isNotEmpty(content) {
    return content != null && content.toString().trim().length() > 0
}

static String changeStyle(String str, boolean toCamel) {
    if (!str || str.size() <= 1)
        return str

    if (toCamel) {
        String r = str.toLowerCase().split('_').collect { cc -> Case.LOWER.apply(cc).capitalize() }.join('')
        return r[0].toLowerCase() + r[1..-1]
    } else {
        str = str[0].toLowerCase() + str[1..-1]
        return str.collect { cc -> ((char) cc).isUpperCase() ? '_' + cc.toLowerCase() : cc }.join('')
    }
}

static String genSerialID() {
    return "\tprivate static final long serialVersionUID = ${Math.abs(new Random().nextLong())}L;"
}